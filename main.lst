                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _UART_RxChar
                                     13 	.globl _UART_TxChar
                                     14 	.globl _UART_Init
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _FL
                                     22 	.globl _P
                                     23 	.globl _PS
                                     24 	.globl _PT1
                                     25 	.globl _PX1
                                     26 	.globl _PT0
                                     27 	.globl _PX0
                                     28 	.globl _RD
                                     29 	.globl _WR
                                     30 	.globl _T1
                                     31 	.globl _T0
                                     32 	.globl _INT1
                                     33 	.globl _INT0
                                     34 	.globl _TXD
                                     35 	.globl _RXD
                                     36 	.globl _P3_7
                                     37 	.globl _P3_6
                                     38 	.globl _P3_5
                                     39 	.globl _P3_4
                                     40 	.globl _P3_3
                                     41 	.globl _P3_2
                                     42 	.globl _P3_1
                                     43 	.globl _P3_0
                                     44 	.globl _EA
                                     45 	.globl _ES
                                     46 	.globl _ET1
                                     47 	.globl _EX1
                                     48 	.globl _ET0
                                     49 	.globl _EX0
                                     50 	.globl _P2_7
                                     51 	.globl _P2_6
                                     52 	.globl _P2_5
                                     53 	.globl _P2_4
                                     54 	.globl _P2_3
                                     55 	.globl _P2_2
                                     56 	.globl _P2_1
                                     57 	.globl _P2_0
                                     58 	.globl _SM0
                                     59 	.globl _SM1
                                     60 	.globl _SM2
                                     61 	.globl _REN
                                     62 	.globl _TB8
                                     63 	.globl _RB8
                                     64 	.globl _TI
                                     65 	.globl _RI
                                     66 	.globl _P1_7
                                     67 	.globl _P1_6
                                     68 	.globl _P1_5
                                     69 	.globl _P1_4
                                     70 	.globl _P1_3
                                     71 	.globl _P1_2
                                     72 	.globl _P1_1
                                     73 	.globl _P1_0
                                     74 	.globl _TF1
                                     75 	.globl _TR1
                                     76 	.globl _TF0
                                     77 	.globl _TR0
                                     78 	.globl _IE1
                                     79 	.globl _IT1
                                     80 	.globl _IE0
                                     81 	.globl _IT0
                                     82 	.globl _P0_7
                                     83 	.globl _P0_6
                                     84 	.globl _P0_5
                                     85 	.globl _P0_4
                                     86 	.globl _P0_3
                                     87 	.globl _P0_2
                                     88 	.globl _P0_1
                                     89 	.globl _P0_0
                                     90 	.globl _B
                                     91 	.globl _A
                                     92 	.globl _ACC
                                     93 	.globl _PSW
                                     94 	.globl _IP
                                     95 	.globl _P3
                                     96 	.globl _IE
                                     97 	.globl _P2
                                     98 	.globl _SBUF
                                     99 	.globl _SCON
                                    100 	.globl _P1
                                    101 	.globl _TH1
                                    102 	.globl _TH0
                                    103 	.globl _TL1
                                    104 	.globl _TL0
                                    105 	.globl _TMOD
                                    106 	.globl _TCON
                                    107 	.globl _PCON
                                    108 	.globl _DPH
                                    109 	.globl _DPL
                                    110 	.globl _SP
                                    111 	.globl _P0
                                    112 ;--------------------------------------------------------
                                    113 ; special function registers
                                    114 ;--------------------------------------------------------
                                    115 	.area RSEG    (ABS,DATA)
      000000                        116 	.org 0x0000
                           000080   117 G$P0$0$0 == 0x0080
                           000080   118 _P0	=	0x0080
                           000081   119 G$SP$0$0 == 0x0081
                           000081   120 _SP	=	0x0081
                           000082   121 G$DPL$0$0 == 0x0082
                           000082   122 _DPL	=	0x0082
                           000083   123 G$DPH$0$0 == 0x0083
                           000083   124 _DPH	=	0x0083
                           000087   125 G$PCON$0$0 == 0x0087
                           000087   126 _PCON	=	0x0087
                           000088   127 G$TCON$0$0 == 0x0088
                           000088   128 _TCON	=	0x0088
                           000089   129 G$TMOD$0$0 == 0x0089
                           000089   130 _TMOD	=	0x0089
                           00008A   131 G$TL0$0$0 == 0x008a
                           00008A   132 _TL0	=	0x008a
                           00008B   133 G$TL1$0$0 == 0x008b
                           00008B   134 _TL1	=	0x008b
                           00008C   135 G$TH0$0$0 == 0x008c
                           00008C   136 _TH0	=	0x008c
                           00008D   137 G$TH1$0$0 == 0x008d
                           00008D   138 _TH1	=	0x008d
                           000090   139 G$P1$0$0 == 0x0090
                           000090   140 _P1	=	0x0090
                           000098   141 G$SCON$0$0 == 0x0098
                           000098   142 _SCON	=	0x0098
                           000099   143 G$SBUF$0$0 == 0x0099
                           000099   144 _SBUF	=	0x0099
                           0000A0   145 G$P2$0$0 == 0x00a0
                           0000A0   146 _P2	=	0x00a0
                           0000A8   147 G$IE$0$0 == 0x00a8
                           0000A8   148 _IE	=	0x00a8
                           0000B0   149 G$P3$0$0 == 0x00b0
                           0000B0   150 _P3	=	0x00b0
                           0000B8   151 G$IP$0$0 == 0x00b8
                           0000B8   152 _IP	=	0x00b8
                           0000D0   153 G$PSW$0$0 == 0x00d0
                           0000D0   154 _PSW	=	0x00d0
                           0000E0   155 G$ACC$0$0 == 0x00e0
                           0000E0   156 _ACC	=	0x00e0
                           0000E0   157 G$A$0$0 == 0x00e0
                           0000E0   158 _A	=	0x00e0
                           0000F0   159 G$B$0$0 == 0x00f0
                           0000F0   160 _B	=	0x00f0
                                    161 ;--------------------------------------------------------
                                    162 ; special function bits
                                    163 ;--------------------------------------------------------
                                    164 	.area RSEG    (ABS,DATA)
      000000                        165 	.org 0x0000
                           000080   166 G$P0_0$0$0 == 0x0080
                           000080   167 _P0_0	=	0x0080
                           000081   168 G$P0_1$0$0 == 0x0081
                           000081   169 _P0_1	=	0x0081
                           000082   170 G$P0_2$0$0 == 0x0082
                           000082   171 _P0_2	=	0x0082
                           000083   172 G$P0_3$0$0 == 0x0083
                           000083   173 _P0_3	=	0x0083
                           000084   174 G$P0_4$0$0 == 0x0084
                           000084   175 _P0_4	=	0x0084
                           000085   176 G$P0_5$0$0 == 0x0085
                           000085   177 _P0_5	=	0x0085
                           000086   178 G$P0_6$0$0 == 0x0086
                           000086   179 _P0_6	=	0x0086
                           000087   180 G$P0_7$0$0 == 0x0087
                           000087   181 _P0_7	=	0x0087
                           000088   182 G$IT0$0$0 == 0x0088
                           000088   183 _IT0	=	0x0088
                           000089   184 G$IE0$0$0 == 0x0089
                           000089   185 _IE0	=	0x0089
                           00008A   186 G$IT1$0$0 == 0x008a
                           00008A   187 _IT1	=	0x008a
                           00008B   188 G$IE1$0$0 == 0x008b
                           00008B   189 _IE1	=	0x008b
                           00008C   190 G$TR0$0$0 == 0x008c
                           00008C   191 _TR0	=	0x008c
                           00008D   192 G$TF0$0$0 == 0x008d
                           00008D   193 _TF0	=	0x008d
                           00008E   194 G$TR1$0$0 == 0x008e
                           00008E   195 _TR1	=	0x008e
                           00008F   196 G$TF1$0$0 == 0x008f
                           00008F   197 _TF1	=	0x008f
                           000090   198 G$P1_0$0$0 == 0x0090
                           000090   199 _P1_0	=	0x0090
                           000091   200 G$P1_1$0$0 == 0x0091
                           000091   201 _P1_1	=	0x0091
                           000092   202 G$P1_2$0$0 == 0x0092
                           000092   203 _P1_2	=	0x0092
                           000093   204 G$P1_3$0$0 == 0x0093
                           000093   205 _P1_3	=	0x0093
                           000094   206 G$P1_4$0$0 == 0x0094
                           000094   207 _P1_4	=	0x0094
                           000095   208 G$P1_5$0$0 == 0x0095
                           000095   209 _P1_5	=	0x0095
                           000096   210 G$P1_6$0$0 == 0x0096
                           000096   211 _P1_6	=	0x0096
                           000097   212 G$P1_7$0$0 == 0x0097
                           000097   213 _P1_7	=	0x0097
                           000098   214 G$RI$0$0 == 0x0098
                           000098   215 _RI	=	0x0098
                           000099   216 G$TI$0$0 == 0x0099
                           000099   217 _TI	=	0x0099
                           00009A   218 G$RB8$0$0 == 0x009a
                           00009A   219 _RB8	=	0x009a
                           00009B   220 G$TB8$0$0 == 0x009b
                           00009B   221 _TB8	=	0x009b
                           00009C   222 G$REN$0$0 == 0x009c
                           00009C   223 _REN	=	0x009c
                           00009D   224 G$SM2$0$0 == 0x009d
                           00009D   225 _SM2	=	0x009d
                           00009E   226 G$SM1$0$0 == 0x009e
                           00009E   227 _SM1	=	0x009e
                           00009F   228 G$SM0$0$0 == 0x009f
                           00009F   229 _SM0	=	0x009f
                           0000A0   230 G$P2_0$0$0 == 0x00a0
                           0000A0   231 _P2_0	=	0x00a0
                           0000A1   232 G$P2_1$0$0 == 0x00a1
                           0000A1   233 _P2_1	=	0x00a1
                           0000A2   234 G$P2_2$0$0 == 0x00a2
                           0000A2   235 _P2_2	=	0x00a2
                           0000A3   236 G$P2_3$0$0 == 0x00a3
                           0000A3   237 _P2_3	=	0x00a3
                           0000A4   238 G$P2_4$0$0 == 0x00a4
                           0000A4   239 _P2_4	=	0x00a4
                           0000A5   240 G$P2_5$0$0 == 0x00a5
                           0000A5   241 _P2_5	=	0x00a5
                           0000A6   242 G$P2_6$0$0 == 0x00a6
                           0000A6   243 _P2_6	=	0x00a6
                           0000A7   244 G$P2_7$0$0 == 0x00a7
                           0000A7   245 _P2_7	=	0x00a7
                           0000A8   246 G$EX0$0$0 == 0x00a8
                           0000A8   247 _EX0	=	0x00a8
                           0000A9   248 G$ET0$0$0 == 0x00a9
                           0000A9   249 _ET0	=	0x00a9
                           0000AA   250 G$EX1$0$0 == 0x00aa
                           0000AA   251 _EX1	=	0x00aa
                           0000AB   252 G$ET1$0$0 == 0x00ab
                           0000AB   253 _ET1	=	0x00ab
                           0000AC   254 G$ES$0$0 == 0x00ac
                           0000AC   255 _ES	=	0x00ac
                           0000AF   256 G$EA$0$0 == 0x00af
                           0000AF   257 _EA	=	0x00af
                           0000B0   258 G$P3_0$0$0 == 0x00b0
                           0000B0   259 _P3_0	=	0x00b0
                           0000B1   260 G$P3_1$0$0 == 0x00b1
                           0000B1   261 _P3_1	=	0x00b1
                           0000B2   262 G$P3_2$0$0 == 0x00b2
                           0000B2   263 _P3_2	=	0x00b2
                           0000B3   264 G$P3_3$0$0 == 0x00b3
                           0000B3   265 _P3_3	=	0x00b3
                           0000B4   266 G$P3_4$0$0 == 0x00b4
                           0000B4   267 _P3_4	=	0x00b4
                           0000B5   268 G$P3_5$0$0 == 0x00b5
                           0000B5   269 _P3_5	=	0x00b5
                           0000B6   270 G$P3_6$0$0 == 0x00b6
                           0000B6   271 _P3_6	=	0x00b6
                           0000B7   272 G$P3_7$0$0 == 0x00b7
                           0000B7   273 _P3_7	=	0x00b7
                           0000B0   274 G$RXD$0$0 == 0x00b0
                           0000B0   275 _RXD	=	0x00b0
                           0000B1   276 G$TXD$0$0 == 0x00b1
                           0000B1   277 _TXD	=	0x00b1
                           0000B2   278 G$INT0$0$0 == 0x00b2
                           0000B2   279 _INT0	=	0x00b2
                           0000B3   280 G$INT1$0$0 == 0x00b3
                           0000B3   281 _INT1	=	0x00b3
                           0000B4   282 G$T0$0$0 == 0x00b4
                           0000B4   283 _T0	=	0x00b4
                           0000B5   284 G$T1$0$0 == 0x00b5
                           0000B5   285 _T1	=	0x00b5
                           0000B6   286 G$WR$0$0 == 0x00b6
                           0000B6   287 _WR	=	0x00b6
                           0000B7   288 G$RD$0$0 == 0x00b7
                           0000B7   289 _RD	=	0x00b7
                           0000B8   290 G$PX0$0$0 == 0x00b8
                           0000B8   291 _PX0	=	0x00b8
                           0000B9   292 G$PT0$0$0 == 0x00b9
                           0000B9   293 _PT0	=	0x00b9
                           0000BA   294 G$PX1$0$0 == 0x00ba
                           0000BA   295 _PX1	=	0x00ba
                           0000BB   296 G$PT1$0$0 == 0x00bb
                           0000BB   297 _PT1	=	0x00bb
                           0000BC   298 G$PS$0$0 == 0x00bc
                           0000BC   299 _PS	=	0x00bc
                           0000D0   300 G$P$0$0 == 0x00d0
                           0000D0   301 _P	=	0x00d0
                           0000D1   302 G$FL$0$0 == 0x00d1
                           0000D1   303 _FL	=	0x00d1
                           0000D2   304 G$OV$0$0 == 0x00d2
                           0000D2   305 _OV	=	0x00d2
                           0000D3   306 G$RS0$0$0 == 0x00d3
                           0000D3   307 _RS0	=	0x00d3
                           0000D4   308 G$RS1$0$0 == 0x00d4
                           0000D4   309 _RS1	=	0x00d4
                           0000D5   310 G$F0$0$0 == 0x00d5
                           0000D5   311 _F0	=	0x00d5
                           0000D6   312 G$AC$0$0 == 0x00d6
                           0000D6   313 _AC	=	0x00d6
                           0000D7   314 G$CY$0$0 == 0x00d7
                           0000D7   315 _CY	=	0x00d7
                                    316 ;--------------------------------------------------------
                                    317 ; overlayable register banks
                                    318 ;--------------------------------------------------------
                                    319 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        320 	.ds 8
                                    321 ;--------------------------------------------------------
                                    322 ; internal ram data
                                    323 ;--------------------------------------------------------
                                    324 	.area DSEG    (DATA)
                           000000   325 Lmain.main$a$1$6==.
      000000                        326 _main_a_1_6:
      000000                        327 	.ds 58
                                    328 ;--------------------------------------------------------
                                    329 ; overlayable items in internal ram 
                                    330 ;--------------------------------------------------------
                                    331 ;--------------------------------------------------------
                                    332 ; Stack segment in internal ram 
                                    333 ;--------------------------------------------------------
                                    334 	.area	SSEG
      000000                        335 __start__stack:
      000000                        336 	.ds	1
                                    337 
                                    338 ;--------------------------------------------------------
                                    339 ; indirectly addressable internal ram data
                                    340 ;--------------------------------------------------------
                                    341 	.area ISEG    (DATA)
                                    342 ;--------------------------------------------------------
                                    343 ; absolute internal ram data
                                    344 ;--------------------------------------------------------
                                    345 	.area IABS    (ABS,DATA)
                                    346 	.area IABS    (ABS,DATA)
                                    347 ;--------------------------------------------------------
                                    348 ; bit data
                                    349 ;--------------------------------------------------------
                                    350 	.area BSEG    (BIT)
                                    351 ;--------------------------------------------------------
                                    352 ; paged external ram data
                                    353 ;--------------------------------------------------------
                                    354 	.area PSEG    (PAG,XDATA)
                                    355 ;--------------------------------------------------------
                                    356 ; external ram data
                                    357 ;--------------------------------------------------------
                                    358 	.area XSEG    (XDATA)
                                    359 ;--------------------------------------------------------
                                    360 ; absolute external ram data
                                    361 ;--------------------------------------------------------
                                    362 	.area XABS    (ABS,XDATA)
                                    363 ;--------------------------------------------------------
                                    364 ; external initialized ram data
                                    365 ;--------------------------------------------------------
                                    366 	.area XISEG   (XDATA)
                                    367 	.area HOME    (CODE)
                                    368 	.area GSINIT0 (CODE)
                                    369 	.area GSINIT1 (CODE)
                                    370 	.area GSINIT2 (CODE)
                                    371 	.area GSINIT3 (CODE)
                                    372 	.area GSINIT4 (CODE)
                                    373 	.area GSINIT5 (CODE)
                                    374 	.area GSINIT  (CODE)
                                    375 	.area GSFINAL (CODE)
                                    376 	.area CSEG    (CODE)
                                    377 ;--------------------------------------------------------
                                    378 ; interrupt vector 
                                    379 ;--------------------------------------------------------
                                    380 	.area HOME    (CODE)
      000000                        381 __interrupt_vect:
      000000 02r00r00         [24]  382 	ljmp	__sdcc_gsinit_startup
                                    383 ;--------------------------------------------------------
                                    384 ; global & static initialisations
                                    385 ;--------------------------------------------------------
                                    386 	.area HOME    (CODE)
                                    387 	.area GSINIT  (CODE)
                                    388 	.area GSFINAL (CODE)
                                    389 	.area GSINIT  (CODE)
                                    390 	.globl __sdcc_gsinit_startup
                                    391 	.globl __sdcc_program_startup
                                    392 	.globl __start__stack
                                    393 	.globl __mcs51_genXINIT
                                    394 	.globl __mcs51_genXRAMCLEAR
                                    395 	.globl __mcs51_genRAMCLEAR
                                    396 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  397 	ljmp	__sdcc_program_startup
                                    398 ;--------------------------------------------------------
                                    399 ; Home
                                    400 ;--------------------------------------------------------
                                    401 	.area HOME    (CODE)
                                    402 	.area HOME    (CODE)
      000003                        403 __sdcc_program_startup:
      000003 02r00r4A         [24]  404 	ljmp	_main
                                    405 ;	return from main will return to caller
                                    406 ;--------------------------------------------------------
                                    407 ; code
                                    408 ;--------------------------------------------------------
                                    409 	.area CSEG    (CODE)
                                    410 ;------------------------------------------------------------
                                    411 ;Allocation info for local variables in function 'UART_Init'
                                    412 ;------------------------------------------------------------
                                    413 ;baudrate                  Allocated to registers r6 r7 
                                    414 ;------------------------------------------------------------
                           000000   415 	G$UART_Init$0$0 ==.
                           000000   416 	C$main.c$2$0$0 ==.
                                    417 ;	main.c:2: void UART_Init(int baudrate){
                                    418 ;	-----------------------------------------
                                    419 ;	 function UART_Init
                                    420 ;	-----------------------------------------
      000000                        421 _UART_Init:
                           000007   422 	ar7 = 0x07
                           000006   423 	ar6 = 0x06
                           000005   424 	ar5 = 0x05
                           000004   425 	ar4 = 0x04
                           000003   426 	ar3 = 0x03
                           000002   427 	ar2 = 0x02
                           000001   428 	ar1 = 0x01
                           000000   429 	ar0 = 0x00
      000000 AE 82            [24]  430 	mov	r6,dpl
      000002 AF 83            [24]  431 	mov	r7,dph
                           000004   432 	C$main.c$3$1$2 ==.
                                    433 ;	main.c:3: SCON = 0x50;
      000004 75 98 50         [24]  434 	mov	_SCON,#0x50
                           000007   435 	C$main.c$4$1$2 ==.
                                    436 ;	main.c:4: TMOD = 0x20;
      000007 75 89 20         [24]  437 	mov	_TMOD,#0x20
                           00000A   438 	C$main.c$5$1$2 ==.
                                    439 ;	main.c:5: TH1 = 256 - (11059200)/(long)(32*12*baudrate);
      00000A 8E*00            [24]  440 	mov	__mulint_PARM_2,r6
      00000C 8F*01            [24]  441 	mov	(__mulint_PARM_2 + 1),r7
      00000E 90 01 80         [24]  442 	mov	dptr,#0x0180
      000011 12r00r00         [24]  443 	lcall	__mulint
      000014 AE 82            [24]  444 	mov	r6,dpl
      000016 AF 83            [24]  445 	mov	r7,dph
      000018 8E*00            [24]  446 	mov	__divslong_PARM_2,r6
      00001A EF               [12]  447 	mov	a,r7
      00001B F5*01            [12]  448 	mov	(__divslong_PARM_2 + 1),a
      00001D 33               [12]  449 	rlc	a
      00001E 95 E0            [12]  450 	subb	a,acc
      000020 F5*02            [12]  451 	mov	(__divslong_PARM_2 + 2),a
      000022 F5*03            [12]  452 	mov	(__divslong_PARM_2 + 3),a
      000024 90 C0 00         [24]  453 	mov	dptr,#0xc000
      000027 75 F0 A8         [24]  454 	mov	b,#0xa8
      00002A E4               [12]  455 	clr	a
      00002B 12r00r00         [24]  456 	lcall	__divslong
      00002E AC 82            [24]  457 	mov	r4,dpl
      000030 C3               [12]  458 	clr	c
      000031 E4               [12]  459 	clr	a
      000032 9C               [12]  460 	subb	a,r4
      000033 F5 8D            [12]  461 	mov	_TH1,a
                           000035   462 	C$main.c$6$1$2 ==.
                                    463 ;	main.c:6: TR1 = 1;
      000035 D2 8E            [12]  464 	setb	_TR1
                           000037   465 	C$main.c$7$1$2 ==.
                           000037   466 	XG$UART_Init$0$0 ==.
      000037 22               [24]  467 	ret
                                    468 ;------------------------------------------------------------
                                    469 ;Allocation info for local variables in function 'UART_TxChar'
                                    470 ;------------------------------------------------------------
                                    471 ;ch                        Allocated to registers 
                                    472 ;------------------------------------------------------------
                           000038   473 	G$UART_TxChar$0$0 ==.
                           000038   474 	C$main.c$9$1$2 ==.
                                    475 ;	main.c:9: void UART_TxChar(char ch){
                                    476 ;	-----------------------------------------
                                    477 ;	 function UART_TxChar
                                    478 ;	-----------------------------------------
      000038                        479 _UART_TxChar:
      000038 85 82 99         [24]  480 	mov	_SBUF,dpl
                           00003B   481 	C$main.c$11$1$4 ==.
                                    482 ;	main.c:11: while(TI==0);
      00003B                        483 00101$:
                           00003B   484 	C$main.c$12$1$4 ==.
                                    485 ;	main.c:12: TI=0;
      00003B 10 99 02         [24]  486 	jbc	_TI,00112$
      00003E 80 FB            [24]  487 	sjmp	00101$
      000040                        488 00112$:
                           000040   489 	C$main.c$13$1$4 ==.
                           000040   490 	XG$UART_TxChar$0$0 ==.
      000040 22               [24]  491 	ret
                                    492 ;------------------------------------------------------------
                                    493 ;Allocation info for local variables in function 'UART_RxChar'
                                    494 ;------------------------------------------------------------
                           000041   495 	G$UART_RxChar$0$0 ==.
                           000041   496 	C$main.c$15$1$4 ==.
                                    497 ;	main.c:15: char UART_RxChar(){
                                    498 ;	-----------------------------------------
                                    499 ;	 function UART_RxChar
                                    500 ;	-----------------------------------------
      000041                        501 _UART_RxChar:
                           000041   502 	C$main.c$16$1$5 ==.
                                    503 ;	main.c:16: while(RI==0);
      000041                        504 00101$:
                           000041   505 	C$main.c$17$1$5 ==.
                                    506 ;	main.c:17: RI=0;
      000041 10 98 02         [24]  507 	jbc	_RI,00112$
      000044 80 FB            [24]  508 	sjmp	00101$
      000046                        509 00112$:
                           000046   510 	C$main.c$18$1$5 ==.
                                    511 ;	main.c:18: return(SBUF);
      000046 85 99 82         [24]  512 	mov	dpl,_SBUF
                           000049   513 	C$main.c$19$1$5 ==.
                           000049   514 	XG$UART_RxChar$0$0 ==.
      000049 22               [24]  515 	ret
                                    516 ;------------------------------------------------------------
                                    517 ;Allocation info for local variables in function 'main'
                                    518 ;------------------------------------------------------------
                                    519 ;i                         Allocated to registers r7 
                                    520 ;a                         Allocated with name '_main_a_1_6'
                                    521 ;ch                        Allocated to registers 
                                    522 ;------------------------------------------------------------
                           00004A   523 	G$main$0$0 ==.
                           00004A   524 	C$main.c$23$1$5 ==.
                                    525 ;	main.c:23: int main(){
                                    526 ;	-----------------------------------------
                                    527 ;	 function main
                                    528 ;	-----------------------------------------
      00004A                        529 _main:
                           00004A   530 	C$main.c$24$1$5 ==.
                                    531 ;	main.c:24: char i,a[]={"Welcome to 8051 Serial Comm, Type the char to be echoed: "};
      00004A 75*00 57         [24]  532 	mov	_main_a_1_6,#0x57
      00004D 75*01 65         [24]  533 	mov	(_main_a_1_6 + 0x0001),#0x65
      000050 75*02 6C         [24]  534 	mov	(_main_a_1_6 + 0x0002),#0x6c
      000053 75*03 63         [24]  535 	mov	(_main_a_1_6 + 0x0003),#0x63
      000056 75*04 6F         [24]  536 	mov	(_main_a_1_6 + 0x0004),#0x6f
      000059 75*05 6D         [24]  537 	mov	(_main_a_1_6 + 0x0005),#0x6d
      00005C 75*06 65         [24]  538 	mov	(_main_a_1_6 + 0x0006),#0x65
      00005F 75*07 20         [24]  539 	mov	(_main_a_1_6 + 0x0007),#0x20
      000062 75*08 74         [24]  540 	mov	(_main_a_1_6 + 0x0008),#0x74
      000065 75*09 6F         [24]  541 	mov	(_main_a_1_6 + 0x0009),#0x6f
      000068 75*0A 20         [24]  542 	mov	(_main_a_1_6 + 0x000a),#0x20
      00006B 75*0B 38         [24]  543 	mov	(_main_a_1_6 + 0x000b),#0x38
      00006E 75*0C 30         [24]  544 	mov	(_main_a_1_6 + 0x000c),#0x30
      000071 75*0D 35         [24]  545 	mov	(_main_a_1_6 + 0x000d),#0x35
      000074 75*0E 31         [24]  546 	mov	(_main_a_1_6 + 0x000e),#0x31
      000077 75*0F 20         [24]  547 	mov	(_main_a_1_6 + 0x000f),#0x20
      00007A 75*10 53         [24]  548 	mov	(_main_a_1_6 + 0x0010),#0x53
      00007D 75*11 65         [24]  549 	mov	(_main_a_1_6 + 0x0011),#0x65
      000080 75*12 72         [24]  550 	mov	(_main_a_1_6 + 0x0012),#0x72
      000083 75*13 69         [24]  551 	mov	(_main_a_1_6 + 0x0013),#0x69
      000086 75*14 61         [24]  552 	mov	(_main_a_1_6 + 0x0014),#0x61
      000089 75*15 6C         [24]  553 	mov	(_main_a_1_6 + 0x0015),#0x6c
      00008C 75*16 20         [24]  554 	mov	(_main_a_1_6 + 0x0016),#0x20
      00008F 75*17 43         [24]  555 	mov	(_main_a_1_6 + 0x0017),#0x43
      000092 75*18 6F         [24]  556 	mov	(_main_a_1_6 + 0x0018),#0x6f
      000095 75*19 6D         [24]  557 	mov	(_main_a_1_6 + 0x0019),#0x6d
      000098 75*1A 6D         [24]  558 	mov	(_main_a_1_6 + 0x001a),#0x6d
      00009B 75*1B 2C         [24]  559 	mov	(_main_a_1_6 + 0x001b),#0x2c
      00009E 75*1C 20         [24]  560 	mov	(_main_a_1_6 + 0x001c),#0x20
      0000A1 75*1D 54         [24]  561 	mov	(_main_a_1_6 + 0x001d),#0x54
      0000A4 75*1E 79         [24]  562 	mov	(_main_a_1_6 + 0x001e),#0x79
      0000A7 75*1F 70         [24]  563 	mov	(_main_a_1_6 + 0x001f),#0x70
      0000AA 75*20 65         [24]  564 	mov	(_main_a_1_6 + 0x0020),#0x65
      0000AD 75*21 20         [24]  565 	mov	(_main_a_1_6 + 0x0021),#0x20
      0000B0 75*22 74         [24]  566 	mov	(_main_a_1_6 + 0x0022),#0x74
      0000B3 75*23 68         [24]  567 	mov	(_main_a_1_6 + 0x0023),#0x68
      0000B6 75*24 65         [24]  568 	mov	(_main_a_1_6 + 0x0024),#0x65
      0000B9 75*25 20         [24]  569 	mov	(_main_a_1_6 + 0x0025),#0x20
      0000BC 75*26 63         [24]  570 	mov	(_main_a_1_6 + 0x0026),#0x63
      0000BF 75*27 68         [24]  571 	mov	(_main_a_1_6 + 0x0027),#0x68
      0000C2 75*28 61         [24]  572 	mov	(_main_a_1_6 + 0x0028),#0x61
      0000C5 75*29 72         [24]  573 	mov	(_main_a_1_6 + 0x0029),#0x72
      0000C8 75*2A 20         [24]  574 	mov	(_main_a_1_6 + 0x002a),#0x20
      0000CB 75*2B 74         [24]  575 	mov	(_main_a_1_6 + 0x002b),#0x74
      0000CE 75*2C 6F         [24]  576 	mov	(_main_a_1_6 + 0x002c),#0x6f
      0000D1 75*2D 20         [24]  577 	mov	(_main_a_1_6 + 0x002d),#0x20
      0000D4 75*2E 62         [24]  578 	mov	(_main_a_1_6 + 0x002e),#0x62
      0000D7 75*2F 65         [24]  579 	mov	(_main_a_1_6 + 0x002f),#0x65
      0000DA 75*30 20         [24]  580 	mov	(_main_a_1_6 + 0x0030),#0x20
      0000DD 75*31 65         [24]  581 	mov	(_main_a_1_6 + 0x0031),#0x65
      0000E0 75*32 63         [24]  582 	mov	(_main_a_1_6 + 0x0032),#0x63
      0000E3 75*33 68         [24]  583 	mov	(_main_a_1_6 + 0x0033),#0x68
      0000E6 75*34 6F         [24]  584 	mov	(_main_a_1_6 + 0x0034),#0x6f
      0000E9 75*35 65         [24]  585 	mov	(_main_a_1_6 + 0x0035),#0x65
      0000EC 75*36 64         [24]  586 	mov	(_main_a_1_6 + 0x0036),#0x64
      0000EF 75*37 3A         [24]  587 	mov	(_main_a_1_6 + 0x0037),#0x3a
      0000F2 75*38 20         [24]  588 	mov	(_main_a_1_6 + 0x0038),#0x20
      0000F5 75*39 00         [24]  589 	mov	(_main_a_1_6 + 0x0039),#0x00
                           0000F8   590 	C$main.c$26$1$6 ==.
                                    591 ;	main.c:26: UART_Init(9600);
      0000F8 90 25 80         [24]  592 	mov	dptr,#0x2580
      0000FB 12r00r00         [24]  593 	lcall	_UART_Init
                           0000FE   594 	C$main.c$27$1$6 ==.
                                    595 ;	main.c:27: for(i=0; a[i] != 0; i++){
      0000FE 7F 00            [12]  596 	mov	r7,#0x00
      000100                        597 00106$:
      000100 EF               [12]  598 	mov	a,r7
      000101 24r00            [12]  599 	add	a,#_main_a_1_6
      000103 F9               [12]  600 	mov	r1,a
      000104 E7               [12]  601 	mov	a,@r1
      000105 FE               [12]  602 	mov	r6,a
      000106 60 0C            [24]  603 	jz	00103$
                           000108   604 	C$main.c$28$2$7 ==.
                                    605 ;	main.c:28: UART_TxChar(a[i]);
      000108 8E 82            [24]  606 	mov	dpl,r6
      00010A C0 07            [24]  607 	push	ar7
      00010C 12r00r38         [24]  608 	lcall	_UART_TxChar
      00010F D0 07            [24]  609 	pop	ar7
                           000111   610 	C$main.c$27$1$6 ==.
                                    611 ;	main.c:27: for(i=0; a[i] != 0; i++){
      000111 0F               [12]  612 	inc	r7
                           000112   613 	C$main.c$31$1$6 ==.
                                    614 ;	main.c:31: while(1)
      000112 80 EC            [24]  615 	sjmp	00106$
      000114                        616 00103$:
                           000114   617 	C$main.c$33$2$8 ==.
                                    618 ;	main.c:33: ch = UART_RxChar();
      000114 12r00r41         [24]  619 	lcall	_UART_RxChar
                           000117   620 	C$main.c$34$2$8 ==.
                                    621 ;	main.c:34: UART_TxChar(ch);
      000117 12r00r38         [24]  622 	lcall	_UART_TxChar
      00011A 80 F8            [24]  623 	sjmp	00103$
                           00011C   624 	C$main.c$36$1$6 ==.
                           00011C   625 	XG$main$0$0 ==.
      00011C 22               [24]  626 	ret
                                    627 	.area CSEG    (CODE)
                                    628 	.area CONST   (CODE)
                                    629 	.area XINIT   (CODE)
                                    630 	.area CABS    (ABS,CODE)
